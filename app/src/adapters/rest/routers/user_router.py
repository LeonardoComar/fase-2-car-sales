"""
Rotas REST para Users - Adapters Layer

Define os endpoints da API para gerenciamento de usu√°rios e autentica√ß√£o.
Aplicando padr√µes REST e Clean Architecture.
"""

from typing import Optional
from uuid import UUID
import logging

from fastapi import APIRouter, Depends, Query, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.responses import JSONResponse

# Configure logging
logger = logging.getLogger(__name__)

from src.application.dtos.user_dto import (
    UserCreateDto, UserUpdateDto, LoginDto
)
from src.adapters.rest.controllers.user_controller import UserController
from src.adapters.rest.dependencies import get_user_controller
from src.adapters.rest.auth_dependencies import (
    get_current_user,
    get_current_admin_user
)
from src.domain.entities.user import User

# Configura√ß√£o do bearer token para autentica√ß√£o
security = HTTPBearer()


# Criar router para usu√°rios
user_router = APIRouter(
    prefix="/users",
    tags=["Users"],
    responses={
        404: {"description": "Usu√°rio n√£o encontrado"},
        422: {"description": "Regra de neg√≥cio violada"},
        500: {"description": "Erro interno do servidor"}
    }
)

# Router para autentica√ß√£o
auth_router = APIRouter(
    prefix="/auth",
    tags=["Authentication"],
    responses={
        401: {"description": "Credenciais inv√°lidas"},
        422: {"description": "Dados inv√°lidos"},
        500: {"description": "Erro interno do servidor"}
    }
)


# === AUTENTICA√á√ÉO ===

@auth_router.post(
    "/login",
    status_code=status.HTTP_200_OK,
    summary="Login de usu√°rio",
    description="Autentica um usu√°rio e retorna token de acesso"
)
async def login(
    credentials: LoginDto,
    controller: UserController = Depends(get_user_controller)
) -> JSONResponse:
    """
    Autentica um usu√°rio no sistema.
    
    - **email**: Email do usu√°rio
    - **password**: Senha do usu√°rio
    
    Retorna token JWT para autentica√ß√£o em requests subsequentes.
    """
    return await controller.authenticate_user(credentials)


@auth_router.post(
    "/logout",
    status_code=status.HTTP_200_OK,
    summary="Logout de usu√°rio",
    description="Invalida o token de acesso do usu√°rio. Requer autentica√ß√£o."
)
async def logout(
    controller: UserController = Depends(get_user_controller),
    current_user: User = Depends(get_current_user)
) -> JSONResponse:
    """
    Invalida o token do usu√°rio (adiciona √† blacklist).
    
    Requer autentica√ß√£o: Usu√°rio v√°lido
    Requer header: Authorization: Bearer {token}
    """
    return await controller.logout_user()


@auth_router.get(
    "/me",
    status_code=status.HTTP_200_OK,
    summary="Informa√ß√µes do usu√°rio atual",
    description="Obt√©m informa√ß√µes do usu√°rio autenticado. Requer autentica√ß√£o."
)
async def get_current_user_info(
    credentials: HTTPAuthorizationCredentials = Depends(security),
    controller: UserController = Depends(get_user_controller),
    current_user: User = Depends(get_current_user)
) -> JSONResponse:
    """
    Obt√©m informa√ß√µes do usu√°rio atual baseado no token JWT.
    
    - **Authorization**: Header Bearer token
    
    Retorna dados do usu√°rio autenticado.
    """
    try:
        logger.info("üöÄ [AUTH_ENDPOINT] Iniciando endpoint /auth/me")
        logger.info(f"üîë [AUTH_ENDPOINT] Credentials recebidas: {credentials}")
        logger.info(f"üîê [AUTH_ENDPOINT] Scheme: {credentials.scheme}")
        logger.info(f"üìã [AUTH_ENDPOINT] Credentials type: {type(credentials.credentials)}")
        
        token = credentials.credentials
        logger.info(f"ÔøΩ [AUTH_ENDPOINT] Token extra√≠do: '{token}'")
        logger.info(f"üìê [AUTH_ENDPOINT] Token length: {len(token) if token else 'None'}")
        logger.info(f"üîç [AUTH_ENDPOINT] Token preview: {token[:50]}..." if len(token) > 50 else f"Token completo: '{token}'")
        
        result = await controller.get_current_user(token)
        logger.info("‚úÖ [AUTH_ENDPOINT] Endpoint /auth/me conclu√≠do com sucesso")
        return result
        
    except Exception as e:
        logger.error(f"üí• [AUTH_ENDPOINT] Erro no endpoint /auth/me: {type(e).__name__}: {str(e)}", exc_info=True)
        raise


# === GERENCIAMENTO DE USU√ÅRIOS ===

@user_router.post(
    "",
    status_code=status.HTTP_201_CREATED,
    summary="Criar usu√°rio",
    description="Cria um novo usu√°rio no sistema. Requer permiss√µes de administrador."
)
async def create_user(
    user_data: UserCreateDto,
    controller: UserController = Depends(get_user_controller),
    current_user: User = Depends(get_current_admin_user)
) -> JSONResponse:
    """
    Cria um novo usu√°rio.
    
    - **email**: Email √∫nico do usu√°rio
    - **password**: Senha (ser√° hasheada)
    - **role**: Perfil do usu√°rio (admin, manager, employee)
    - **employee_id**: ID do funcion√°rio associado (opcional)
    
    Requer autentica√ß√£o: Administrador
    Requer header: Authorization: Bearer {token}
    """
    return await controller.create_user(user_data)


@user_router.get(
    "/{user_id}",
    status_code=status.HTTP_200_OK,
    summary="Buscar usu√°rio por ID",
    description="Busca um usu√°rio espec√≠fico pelo ID. Requer permiss√µes de administrador."
)
async def get_user_by_id(
    user_id: UUID,
    controller: UserController = Depends(get_user_controller),
    current_user: User = Depends(get_current_admin_user)
) -> JSONResponse:
    """
    Busca um usu√°rio pelo ID.
    
    - **user_id**: ID √∫nico do usu√°rio (UUID)
    
    Requer autentica√ß√£o: Administrador
    Requer header: Authorization: Bearer {token}
    """
    return await controller.get_user_by_id(user_id)


@user_router.get(
    "",
    status_code=status.HTTP_200_OK,
    summary="Listar usu√°rios",
    description="Lista usu√°rios com filtros e pagina√ß√£o. Requer permiss√µes de administrador."
)
async def list_users(
    email: Optional[str] = Query(None, description="Filtrar por email"),
    role: Optional[str] = Query(None, description="Filtrar por perfil"),
    employee_id: Optional[UUID] = Query(None, description="Filtrar por funcion√°rio"),
    page: int = Query(1, ge=1, description="N√∫mero da p√°gina"),
    page_size: int = Query(20, ge=1, le=100, description="Tamanho da p√°gina"),
    controller: UserController = Depends(get_user_controller),
    current_user: User = Depends(get_current_admin_user)
) -> JSONResponse:
    """
    Lista usu√°rios com filtros opcionais e pagina√ß√£o.
    
    Requer autentica√ß√£o: Administrador
    Requer header: Authorization: Bearer {token}
    """
    search_data = {
        "email": email,
        "role": role,
        "employee_id": employee_id,
        "page": page,
        "page_size": page_size
    }
    return await controller.search_users(search_data)


@user_router.put(
    "/{user_id}",
    status_code=status.HTTP_200_OK,
    summary="Atualizar usu√°rio",
    description="Atualiza os dados de um usu√°rio existente. Requer permiss√µes de administrador."
)
async def update_user(
    user_id: UUID,
    user_data: UserUpdateDto,
    controller: UserController = Depends(get_user_controller),
    current_user: User = Depends(get_current_admin_user)
) -> JSONResponse:
    """
    Atualiza os dados de um usu√°rio.
    
    Requer autentica√ß√£o: Administrador
    Requer header: Authorization: Bearer {token}
    """
    return await controller.update_user(user_id, user_data)


@user_router.delete(
    "/{user_id}",
    status_code=status.HTTP_204_NO_CONTENT,
    summary="Deletar usu√°rio",
    description="Remove um usu√°rio do sistema. Requer permiss√µes de administrador."
)
async def delete_user(
    user_id: UUID,
    controller: UserController = Depends(get_user_controller),
    current_user: User = Depends(get_current_admin_user)
) -> JSONResponse:
    """
    Remove um usu√°rio do sistema.
    
    Requer autentica√ß√£o: Administrador
    Requer header: Authorization: Bearer {token}
    """
    return await controller.delete_user(user_id)


@user_router.patch(
    "/{user_id}/change-password",
    status_code=status.HTTP_200_OK,
    summary="Alterar senha",
    description="Altera a senha de um usu√°rio. Requer autentica√ß√£o (pr√≥prio usu√°rio ou admin)."
)
async def change_password(
    user_id: UUID,
    controller: UserController = Depends(get_user_controller),
    current_user: User = Depends(get_current_user)
) -> JSONResponse:
    """
    Altera a senha de um usu√°rio.
    
    Requer senha atual e nova senha no body.
    
    Requer autentica√ß√£o: Usu√°rio autenticado (pr√≥prio usu√°rio ou admin)
    Requer header: Authorization: Bearer {token}
    """
    return await controller.change_password(user_id)
